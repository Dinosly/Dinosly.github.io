(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{181:function(t,a,_){"use strict";_.r(a);var s=_(6),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"一、变量、执行上下文、作用域、内存、垃圾回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、变量、执行上下文、作用域、内存、垃圾回收"}},[t._v("#")]),t._v(" 一、变量、执行上下文、作用域、内存、垃圾回收")]),t._v(" "),_("h1",{attrs:{id:"_1-变量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-变量"}},[t._v("#")]),t._v(" 1.变量")]),t._v(" "),_("ul",[_("li",[_("h2",{attrs:{id:"基本类型-和-引用类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本类型-和-引用类型"}},[t._v("#")]),t._v(" 基本类型 和 引用类型")]),t._v(" "),_("ul",[_("li",[t._v("基本类型（6个）：\n"),_("ul",[_("li",[t._v("null，undefined，number，string，Boolean，==symbol==（）")]),t._v(" "),_("li",[t._v("按值访问，可以操作保存在变量中实际的值")]),t._v(" "),_("li",[t._v("基本类型值在内存中占据固定大小的空间，因此被保存在"),_("strong",[t._v("栈内存")]),t._v("中；")])])]),t._v(" "),_("li",[t._v("引用类型（6个）：\n"),_("ul",[_("li",[t._v("对象Object（包含普通对象-Object，数组对象-Array，正则对象-RegExp，日期对象-Date，数学函数-Math，函数对象-Function")]),t._v(" "),_("li",[t._v("按引用访问，引用类型的值其实为保存在内存中的对象，不能直接操作对象的内存空间，通常操作对象的引用（指针，内存地址）")]),t._v(" "),_("li",[t._v("引用类型的值是对象，保存在"),_("strong",[t._v("堆内存")]),t._v("中")])])])])]),t._v(" "),_("li",[_("h2",{attrs:{id:"复制变量值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#复制变量值"}},[t._v("#")]),t._v(" 复制变量值")]),t._v(" "),_("ul",[_("li",[t._v("基本类型：\n"),_("ul",[_("li",[t._v("在变量对象处创建新值，将新值复制给新变量，变量之间不会相互影响\n"),_("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200330173003761.png",alt:"在这里插入图片描述"}})])])]),t._v(" "),_("li",[t._v("引用类型：\n"),_("ul",[_("li",[t._v("在变量对象处创建新值（引用对象的新值其实为指向对象内存地址的指针），将新值复制给新变量，新复制的值和原值都指向同一个对象，改变其中一个，改变的是共同指向的对象，所以另一个也会随之改变\n"),_("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200330172947436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA0NzE4MA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})])])])])]),t._v(" "),_("li",[_("h2",{attrs:{id:"传递参数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#传递参数"}},[t._v("#")]),t._v(" 传递参数")]),t._v(" "),_("ul",[_("li",[t._v("函数传参都是==按照值传递，不论参数是基本类型还是引用类型，都按值传递==（参数值不论是基本类型还是引用类型都是按值传递）")]),t._v(" "),_("li",[t._v("基本类型:\n"),_("ul",[_("li",[t._v("将参数的值复制给局部变量")])])]),t._v(" "),_("li",[t._v("引用类型：\n"),_("ul",[_("li",[t._v("将参数的指针复制给局部变量，指向同一个对象")]),t._v(" "),_("li",[t._v("函数内的局部变量修改引用对象的属性，外部参数也会随之改变")])])])])]),t._v(" "),_("li",[_("h2",{attrs:{id:"检测类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#检测类型"}},[t._v("#")]),t._v(" 检测类型")]),t._v(" "),_("ul",[_("li",[t._v("typeof 操作符\n"),_("ul",[_("li",[t._v("检测基本类型的值")]),t._v(" "),_("li",[t._v("typeof null  // object 一般使用typeof需要先判断非null类型")])])]),t._v(" "),_("li",[t._v("instanceof 操作符\n"),_("ul",[_("li",[t._v("检测引用类型的值")]),t._v(" "),_("li",[t._v('"person" instanceof Object  // false')])])])])]),t._v(" "),_("li",[_("h2",{attrs:{id:"变量提升"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#变量提升"}},[t._v("#")]),t._v(" 变量提升")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("var a = 10;\n//实际JavaScript执行顺序为\nvar a // 先为a赋值为undefined\na = 10; // 在执行a的真正赋值\n")])])])]),t._v(" "),_("li",[_("h2",{attrs:{id:"函数提升"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#函数提升"}},[t._v("#")]),t._v(" 函数提升")]),t._v(" "),_("ul",[_("li",[t._v("定义函数的两种方式：\n"),_("ul",[_("li",[t._v("函数声明: function foo () {};\n"),_("ul",[_("li",[t._v("函数声明则会将函数提升至整个作用域的最顶部")])])]),t._v(" "),_("li",[t._v("函数表达式: var foo = function () {}.\n"),_("ul",[_("li",[t._v("函数表达式 类似于 变量声明 将foo提升至作用于顶部，赋值undefined")])])])])])]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("console.log(f1) // function f1(){}\nfunction f1() {} // 函数声明\nconsole.log(f2) // undefined\nvar f2 = function() {} // 函数表达式\n")])])])]),t._v(" "),_("li",[_("h2",{attrs:{id:"函数声明优先级高于变量声明"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#函数声明优先级高于变量声明"}},[t._v("#")]),t._v(" 函数声明优先级高于变量声明")]),t._v(" "),_("ul",[_("li",[t._v("同一作用域下存在多个"),_("strong",[t._v("同名函数")]),t._v("声明，后面的会替换前面的函数声明")])])])]),t._v(" "),_("h1",{attrs:{id:"_2-执行环境（执行上下文）及作用域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-执行环境（执行上下文）及作用域"}},[t._v("#")]),t._v(" 2.执行环境（执行上下文）及作用域")]),t._v(" "),_("ul",[_("li",[_("h2",{attrs:{id:"可执行代码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#可执行代码"}},[t._v("#")]),t._v(" 可执行代码")]),t._v(" "),_("ul",[_("li",[_("h4",{attrs:{id:"javascript可执行代码分类："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#javascript可执行代码分类："}},[t._v("#")]),t._v(" JavaScript可执行代码分类：")]),t._v(" "),_("ul",[_("li",[t._v("全局代码、函数代码、eval代码")])])])])]),t._v(" "),_("li",[_("h2",{attrs:{id:"执行环境（执行上下文）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#执行环境（执行上下文）"}},[t._v("#")]),t._v(" 执行环境（执行上下文）")]),t._v(" "),_("ul",[_("li",[_("h4",{attrs:{id:"什么是执行上下文："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是执行上下文："}},[t._v("#")]),t._v(" 什么是执行上下文：")]),t._v(" "),_("ul",[_("li",[t._v("javascript可执行代码"),_("strong",[t._v("被解析和执行时所在环境")]),t._v("的抽象概念（其实就是一个执行环境）")]),t._v(" "),_("li",[t._v("生成环境的同时定义了"),_("strong",[t._v("变量")]),t._v("或"),_("strong",[t._v("函数")]),t._v("有权访问的数据范围，也就是一个对象")])])]),t._v(" "),_("li",[_("h4",{attrs:{id:"执行上下文三个重要属性："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文三个重要属性："}},[t._v("#")]),t._v(" 执行上下文三个重要属性：")]),t._v(" "),_("ul",[_("li",[t._v("变量对象 VO：\n"),_("ul",[_("li",[t._v("变量对象是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。")])])]),t._v(" "),_("li",[t._v("作用域链")]),t._v(" "),_("li",[t._v("this")])])]),t._v(" "),_("li",[_("h4",{attrs:{id:"执行上下文三种类型："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文三种类型："}},[t._v("#")]),t._v(" 执行上下文三种类型：")]),t._v(" "),_("ul",[_("li",[t._v("全局执行上下文（"),_("strong",[t._v("唯一")]),t._v("）：js开始运行进入的第一个环境（也就是浏览器对象(即window对象)，也就是"),_("strong",[t._v("变量对象VO")]),t._v("，并不能在js环境中直接访问）")]),t._v(" "),_("li",[t._v("函数执行上下文 ：当函数被"),_("strong",[t._v("调用")]),t._v("才会创建，每调用一次就创建一次新的执行上下文，被调用后会创建一个   "),_("strong",[t._v("活动对象AO")]),t._v("，在当前执行上下文中的变量和函数该AO都可以访问的到")]),t._v(" "),_("li",[t._v("eval函数执行上下文：eval函数执行其内部的代码会创建属于自己的执行上下文, 很少用而且不建议使用")])])]),t._v(" "),_("li",[_("h4",{attrs:{id:"多个执行上下文如何运行："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多个执行上下文如何运行："}},[t._v("#")]),t._v(" 多个执行上下文如何运行：")]),t._v(" "),_("ul",[_("li",[t._v("单线程，一个一个执行")]),t._v(" "),_("li",[_("strong",[t._v("执行栈")]),t._v("进行调度，LIFO(last-in first-out)后进先出，只有栈顶处于执行中，其他需等待")]),t._v(" "),_("li",[t._v("js首次执行（"),_("strong",[t._v("全局执行上下文")]),t._v("）-> 有函数被调用时（js引擎创建一个"),_("strong",[t._v("函数执行上下文")]),t._v("）-> ...调用n次函数... -> 栈顶的函数执行完毕，该函数对应的"),_("strong",[t._v("函数执行上下文")]),t._v("出栈 -> 浏览器窗口关闭（"),_("strong",[t._v("全局上下文执行")]),t._v("出栈）。\n"),_("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200331153207606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA0NzE4MA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v("\n执行栈调用关系如下图："),_("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200331153246405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA0NzE4MA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})])])]),t._v(" "),_("li",[_("h4",{attrs:{id:"执行上下文的生命周期："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的生命周期："}},[t._v("#")]),t._v(" 执行上下文的生命周期：")])])]),t._v(" "),_("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200331153747776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA0NzE4MA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v("\n- 创建阶段："),_("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200331155156854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA0NzE4MA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v(" "),_("ul",[_("li",[t._v("绑定this：")]),t._v(" "),_("li",[t._v("词法环境："),_("strong",[t._v("let 和 const 绑定")]),t._v(" "),_("ul",[_("li",[t._v("词法环境分为：全局词法环境，函数词法环境")]),t._v(" "),_("li",[t._v("词法环境组成：环境记录 + 对外部环境的引用\n"),_("ul",[_("li",[t._v("环境记录：存储变量和函数声明的实际位置")]),t._v(" "),_("li",[t._v("对外部环境的引用：用于访问外部词法环境，上一级作用域链")])])])])]),t._v(" "),_("li",[t._v("变量环境："),_("strong",[t._v("var 绑定")]),t._v(" "),_("ul",[_("li",[t._v("其余部分和词法环境一样\n"),_("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200331173054339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzA0NzE4MA==,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v('GlobalExectionContext = { // 全局执行上下文\n    ThisBinding: <Global Object>,\n    LexicalEnvironment: {   // 词法环境\n    \tEnvironmentRecord: {   // 环境记录\n        \tType: "Object",       // 全局环境\n        \tc: < uninitialized >,\n                d: < uninitialized >,\n        \tfn: < func >\n    \t},\n    \touter: <null>            // 外部环境引用\n    },\n    VariableEnvironment: {   // 变量环境\n    \tEnvironmentRecord: {   // 环境记录\n    \t\tType: "Object",\n    \t\ta: < uninitialized >,\n    \t\tb: < uninitialized >\n    \t},\n    \touter: <null>  \n    }\n}\nFunctionExectionContext = { // 函数执行上下文\n    ThisBinding: <Global Object>, // this绑定window, 因为调用fn的是window对象\n    LexicalEnvironment: {   // 词法环境\n    \tEnvironmentRecord: {   // 环境记录\n    \t\tType: "Object",       // 函数环境\n    \t\tArguments: { 0: 10, 1: 20, length: 2 }\n    \t},\n        outer: < GlobalLexicalEnvironment > // 全局环境的引用\n    },\n    VariableEnvironment: {   // 变量环境\n    \tEnvironmentRecord: {   // 环境记录\n    \t\tType: "Object",\n    \t\tg: < uninitialized >\n    \t},\n    \touter: < GlobalLexicalEnvironment > // 全局环境的引用\n    }\n}\n')])])])])])])])])]),t._v(" "),_("h1",{attrs:{id:"_3-作用域、作用域链、闭包"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-作用域、作用域链、闭包"}},[t._v("#")]),t._v(" 3.作用域、作用域链、闭包")]),t._v(" "),_("ul",[_("li",[_("h4",{attrs:{id:"什么是作用域："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是作用域："}},[t._v("#")]),t._v(" 什么是作用域：")]),t._v(" "),_("ul",[_("li",[t._v("作用域是一个变量和函数的作用范围")]),t._v(" "),_("li",[t._v("没有块级作用域（"),_("strong",[t._v("ES6之后有let 、 const 可以定义块级作用域")]),t._v("）")])])]),t._v(" "),_("li",[_("h4",{attrs:{id:"什么是作用域链："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是作用域链："}},[t._v("#")]),t._v(" 什么是作用域链：")]),t._v(" "),_("ul",[_("li",[t._v("访问一个变量时，解释器会首先在当前作用域查找标示符，没找到则去父作用域查找，一层一层向上找至全局作用域")])])]),t._v(" "),_("li",[_("h4",{attrs:{id:"作用域链特点："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#作用域链特点："}},[t._v("#")]),t._v(" 作用域链特点：")]),t._v(" "),_("ul",[_("li",[t._v("外部环境不能访问内部环境中的任何"),_("strong",[t._v("变量")]),t._v("和"),_("strong",[t._v("函数")])]),t._v(" "),_("li",[t._v("环境之间的联系是线性、有次序的，由内到外访问")])])]),t._v(" "),_("li",[_("h4",{attrs:{id:"作用域链如何创建和变化："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#作用域链如何创建和变化："}},[t._v("#")]),t._v(" 作用域链如何创建和变化：")]),t._v(" "),_("ul",[_("li",[t._v("创建：\n"),_("ul",[_("li",[t._v("在全局执行上下文创建时，全局对象中就定义了当前环境下涉及到的变量对象、函数对象的作用域标识")])])]),t._v(" "),_("li",[t._v("调用：\n"),_("ul",[_("li",[t._v("函数被调用，新的函数执行上下文创建，新的作用域对象（包括函数的参数，涉及到的变量）也被创建，此时形成了一个作用域链（新作用域对象 -> 全局对象 ）")])])])])]),t._v(" "),_("li",[_("h4",{attrs:{id:"闭包"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),_("ul",[_("li",[t._v("什么是闭包 ：\n"),_("ul",[_("li",[_("strong",[t._v("闭包是指在当前作用域内总是能访问外部作用域中的变量的一个函数")])])])])])])]),t._v(" "),_("h1",{attrs:{id:"_4-内存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-内存"}},[t._v("#")]),t._v(" 4.内存")]),t._v(" "),_("ul",[_("li",[_("h2",{attrs:{id:"内存泄漏："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏："}},[t._v("#")]),t._v(" 内存泄漏：")]),t._v(" "),_("ul",[_("li",[t._v("变量不被引用，一直占用内存空间")])])]),t._v(" "),_("li",[_("h2",{attrs:{id:"内存泄漏识别方法："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏识别方法："}},[t._v("#")]),t._v(" 内存泄漏识别方法：")]),t._v(" "),_("ul",[_("li",[t._v("浏览器：\n"),_("ul",[_("li",[t._v("开发者工具 -> Memory -> Select profiling type字段里面勾选 timeline -> 录制 -> 页面上进行各种操作，模拟用户的使用情况 -> 点击左上角的 stop 按钮，面板上就会显示这段时间的内存占用情况")])])]),t._v(" "),_("li",[t._v("命令行方法:\n"),_("ul",[_("li",[t._v("node提供的process.memoryUsage方法;")]),t._v(" "),_("li",[t._v("判断内存泄漏，以heapUsed字段为准。")]),t._v(" "),_("li",[_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v('  console.log(process.memoryUsage());\n  // 输出\n  { \n    rss: 27709440,\t\t// resident set size，所有内存占用，包括指令区和堆栈\n    heapTotal: 5685248,   // "堆"占用的内存，包括用到的和没用到的\n    heapUsed: 3449392,\t// 用到的堆的部分\n    external: 8772 \t\t// V8 引擎内部的 C++ 对象占用的内存\n  }\n')])])])])])])])]),t._v(" "),_("li",[_("h2",{attrs:{id:"weakmap-和-weakset：es6-弱引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#weakmap-和-weakset：es6-弱引用"}},[t._v("#")]),t._v(" weakMap 和 weakSet：ES6 弱引用")]),t._v(" "),_("ul",[_("li",[t._v("对于值的引用都是不计入垃圾回收机制")]),t._v(" "),_("li",[t._v("如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。（不需要在使用完对象后对其进行释放，会自动回收它的内存）")])])]),t._v(" "),_("li",[_("h2",{attrs:{id:"四种常见js内存泄漏："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四种常见js内存泄漏："}},[t._v("#")]),t._v(" 四种常见js内存泄漏：")]),t._v(" "),_("ul",[_("li",[t._v("1.函数内未定义的全局变量：\n"),_("ul",[_("li",[t._v("1.1为使用var、let、const定义的对象会挂载在window全局对象上")]),t._v(" "),_("li",[t._v("1.2this引用：有些情况this会指向window全局对象")]),t._v(" "),_("li",[_("strong",[t._v("解决办法：")]),t._v(" 在 JavaScript 文件头部加上 'use strict'，使用严格模式避免意外的全局变量")])])]),t._v(" "),_("li",[t._v("2.计时器/回调函数")]),t._v(" "),_("li",[t._v("3.脱离 DOM 的引用")]),t._v(" "),_("li",[t._v("4.闭包")])])])]),t._v(" "),_("h1",{attrs:{id:"_5-内存-垃圾回收机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-内存-垃圾回收机制"}},[t._v("#")]),t._v(" 5.内存/垃圾回收机制")]),t._v(" "),_("ul",[_("li",[_("h2",{attrs:{id:"概念："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概念："}},[t._v("#")]),t._v(" 概念：")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("执行环境")]),t._v("找出那些不再继续使用的"),_("strong",[t._v("变量")]),t._v("，然后释放其占用的"),_("strong",[t._v("内存")])]),t._v(" "),_("li",[t._v("垃圾收集器会按照"),_("strong",[t._v("固定的时间间隔")]),t._v("（或代码执行中预定的收集时间），周期性地执行这一操作")]),t._v(" "),_("li",[t._v("当"),_("strong",[t._v("函数返回")]),t._v("没有被引用的时候，函数就会被垃圾回收器回收")])])]),t._v(" "),_("li",[_("h2",{attrs:{id:"两种常用垃圾收集方式："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#两种常用垃圾收集方式："}},[t._v("#")]),t._v(" 两种常用垃圾收集方式：")]),t._v(" "),_("ul",[_("li",[t._v("标记清除：\n"),_("ul",[_("li",[t._v("i.变量进入执行环境则被标记")]),t._v(" "),_("li",[t._v("ii.去除掉环境变量以及被环境变量引用的变量，把此时内存中留下的全部变量再次标记")]),t._v(" "),_("li",[t._v("iii.删除这些二次标记的变量，回收内存空间")])])]),t._v(" "),_("li",[t._v("引用计数：\n"),_("ul",[_("li",[t._v("跟踪记录每个值被"),_("strong",[t._v("引用")]),t._v("（"),_("em",[t._v("声明了一个变量并将一个引用类型值赋给该变量次数加1,如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1")]),t._v("）的次数")]),t._v(" "),_("li",[t._v("会产生两个对象循环引用问题 ：\n"),_("ul",[_("li",[t._v("两个对象多次循环调用，占用大量的内存空间，又无法及时回收，导致内存泄漏")])])])])])])])])])}),[],!1,null,null,null);a.default=v.exports}}]);